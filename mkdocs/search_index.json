{
    "docs": [
        {
            "location": "/", 
            "text": "Configuring for GPS Location and Time Synchronization\n\n\nNetwork Time Protocol (NTP)\n\n\nNTP is a time synchronizing protcol.It synchronizes the time of the machines on a network by using the set of time servers as its reference.\n\n\nNeed for time synchronization\n\n\nMost of us believe that the computer clocks are accurate,being unaware of the fact that the crystal oscillator that is being used in the computer clocks drift each day because it is sensitive to temperature and other things.It is because of this reason there is a necessity for those organizations to synchronize their computers clocks who requires time accuracy nearest to seconds.\n\n\nImportance of Time Synchronization\n\n\nIn today's era time synchronization plays a critical role in managing or debugging things over the network as each event requires time stamp.Following are the areas where time synchronization is critical:\n\n\n1.Transaction Management\n2.Billing Services\n3.Detecting the fault over network\n\n\nBasic Features of NTP\n\n\n\n\nNTP also requires some time reference clock with whose time it can synchronize the clocks of other computers on the netwrok.It uses UTC as reference time.\n\n\nNTP selects the best among all defined time servers to get synchronize to.It selects the one from which it is receiving the reply in lesser time(i.e. for whom the roundtrip time is least )\n\n\nIf the network is temporarily not available then NTP uses previous measurements to get the current time.\n\n\n\n\nInstalling and Configuring NTP for GPS NMEA and PPS\n\n\nTo get accurate time, we use the GPS Module Navika100 GPS NMEA messages and 1 PPS signal as inputs and feed it to a NTP server running on the Beaglebone black.\n\n\nThis page describes how it is done. The overall architecture is like this: NTP runs as a daemon (ntpd). It receives inputs from servers (pool.ntp.org, etc.), and NMEA drivers.\n\n\nInstalling NTP and setting up a NTP server\n\n\nNote:\nAll commands are executed as root on Beaglebone Black unless mentioned otherwise.\n\n\nBasic initial configuration:\n\n\n\n\nBBB should be connected to internet\n\n\nBBB should be running debian wheezy\n\n\nkernel should have the pps support \n\n\n\n\nBefore configuring GPS with NTP first install the ntp package :\n\n\nlogin as root using\n\n\n    $ sudo su\n\n\n\ninstall ntp\n\n\n    $ apt-get install ntp\n\n\n\nChange the configuration file of ntp on Beaglebone Black to include the servers according to your time zone to obtain the time.\n\n\n    $ nano /etc/ntp.conf\n\n\n\nAdd the ntp server as per your location from NTP Pool Servers.\n\n\nIf your time zone is Asia and in Asia you are in India then add the following in ntp.conf just after the section where 4 servers from debian are already mentioned and by default commented. Uncomment the first server from that list, to look like this :\n\n\n    server 0.debian.pool.ntp.org\n    #server 1.debian.pool.ntp.org iburst\n    #server 2.debian.pool.ntp.org iburst\n    #server 3.debian.pool.ntp.org iburst\n\n    server 0.in.pool.ntp.org\n    server 3.asia.pool.ntp.org\n    server 0.asia.pool.ntp.org\n\n\n\nNow Save and exit.\n\n\nRestart ntp using\n\n\n    $ /etc/init.d/ntp restart\n\n\n\nTo check the ntp output:\n\n\n    $ ntpq -p\n\n\n\nConfiguring GPS NMEA UART port and PPS GPIO to work with Navika 10 GPS Module\n\n\nGo to the following directory for enabling UART port and configuring PPS GPIO\n\n\n    cd /lib/firmware\n\n\n\nNow ensure that the BBB Vayu overlay is already present in the directory (BBB_VAYU-00A0.dtbo)\n\n\n    ls\n\n\n\nIf it is not present, please download and copy the overlay from here\n\n\nApply the following device tree overlays :\n\n\n    $ echo BB-UART4 \n /sys/devices/bone_capemgr.9/slots\n    $ echo BBB_VAYU \n /sys/devices/bone_capemgr.9/slots\n\n\n\nTo check that the overlays have been properly applied , do following :\n\n\ni. Check slots for device trees implemented\n\n\n    $ cat /sys/devices/bone_capemgr.9/slots\n\n\n\nThe output should be like this :\n\n\n    0: 54:PF--- \n    1: 55:PF--- \n    2: 56:PF--- \n    3: 57:PF--- \n    4: ff:P-O-L Bone-LT-eMMC-2G,00A0,Texas Instrument,BB-BONE-EMMC-2G \n    5: ff:P-O-L Bone-Black-HDMI,00A0,Texas Instrument,BB-BONELT-HDMI \n    7: ff:P-O-L Override Board Name,00A0,Override Manuf, BB-UART4\n    8: ff:P-O-L Override Board Name,00A0,Override Manuf, BBB_VAYU\n\n\n\nL indicates that the device tree overlay is applied.\n\n\nii To check that PPS GPIO has been configured, check the system log messages and list of devices :\n\n\n    $ dmesg\n\n\n\nIt should show pps pps1: Registered IRQ 171 as PPS source in the messages.\n\n\nNow, to read the GPS NMEA packets and see their raw format,do the following :\n\n\nNote1:\nEnsure that GPS Antenna has been connected to correct antenna SMA connector.\n\n\nNote2:\nGPS Fix Led takes some time before it starts blinking in sync with 1 pps signal.\n\n\nNote3:\nFor better and faster results, keep GPS antenna under open sky or outdoors. Indoors, GPS antenna may take time to get the sync as well as give accurate NMEA messages.\n\n\nSet the following port settings for UART4 to read the GPS NMEA messages\n\n\n    $ stty -F /dev/ttyO4 19200 raw\n\n\n\nRead the data on the port and output should be something like :\n\n\n    $ cat /dev/ttyO4\n\n    $GPGSA,A,3,02,04,12,25,24,05,10,,,,,,02.4,01.1,02.1*07 \n    $GPGLL,2834.2631,N,07720.5426,E,102954.00,A,A*6E \n    $GPGSV,3,1,07,02,71,345,50,04,40,038,48,12,62,315,47,25,20,321,45*7F \n    $GPGSV,3,2,07,05,41,167,23,10,48,086,23,24,24,236,30,,,,*48 \n    $GPGSV,3,3,07,,,,,,,,,,,,,,,,*7E\n\n\n\nUsing Xgps and Gpsd to work with Navika\n\n\nUsing Gpsd\n\n\nGpsd allows a direct connection to a GPS receiver, in this case the Navika module, and collecting NMEA messages directly from the serial port. This enables NMEA messages to be then picked up by multiple clients such as xgps, cgps and also ntpd.\n\n\n\n\nCheck first that Navika is configured correctly and gps data is reaching the /dev/ttyO4 port.\ncat /dev/ttyO4\n\n\n\n\n\n\n\nYou should see NMEA messages appearing on stdout.\n\n\n\n\nStarting GPSD can be done interactively by \ngpsd /dev/ttyO4 -D 8 -N -b\n\n\n\n\n\n\n\n\n\nOr you may set it up as a service as well to start automatically. Once gpsd starts, clients may connect to gpsd simultaneously.\n\n\nFor enabling NMEA messages in NTP, add the following to /etc/ntp.conf:\n\n\n    server 127.127.28.0 minpoll 4 maxpoll 4\n    fudge 127.127.28.0 time1 0.420 refid GPS\n\n    server 127.127.28.1 minpoll 4 maxpoll 4 prefer\n    fudge 127.127.28.1 refid GPS1\n\n\n\nand then restart ntpd.\n\n\nTo run and see xgps, type\n\n\n    xgps\n\n\n\nA screenshot is shown below: \n\n\n\n\nTo run and use cgps, type\n\n\n    cgps\n\n\n\nA screenshot is shown below: \n\n\n\n\nStatistics collection\n\n\nIf statistics collection is enabled in /etc/ntp.conf file, you can see the resultant output logged in peerstats file. This gives both offset and jitter values for each reference clock (including time servers from the ntp.org pool). By looking specifically at the NMEA reference clock, we can get the gps jitter and gps offset values. Separately, it is also possible to compare the effect of pps on the basic gps signal (see Getting PPS and GPS to work with NTP server for details). \n\n\n       \n\n\n\n\nGetting PPS and GPS to work with NTP server\n\n\nThis procedure requires Kernel with PPS drivers enabled and also PPS configured for GPIO. To ensure that PPS drivers are there in the kernel by following the steps:\n\n\nlogin as root (ignore if you are already at root)\ncheck in the /dev directory whether pps drivers are there or not\n\n\n    $ ls /dev/pps*\n\n\n\nyou should see pps0 in the list\n\n\nNote:\n If pps0 is not present, please follow Add USB and PPS drivers to update the kernel to include PPS drivers.\n\n\nInstall the following packages\n\n\n    $ apt-get install ncurses-dev\n    $ apt-get install bzip2\n    $ apt-get install module-init-tools\n    $ apt-get install initramfs-tools\n    $ apt-get install procps \n    $ apt-get install fakeroot\n    $ apt-get install zlib1g-dev \n    $ apt-get install git-core \n    $ apt-get install libblkid-dev\n    $ apt-get install kernel-package\n\n\n\nNote:\n In latest kernel versions, it is possible few packages mentioned above are already installed.\n\n\nObtain the linuxpps userland tools\n\n\n    $ cd /usr/src\n    $ git clone git://www.linuxpps.org/git/pps-tools pps-tools\n\n\n\nCopy the timepps.h file so ntpd gets built with pps support\n\n\n    $ cd /usr/include\n    $ cp /usr/src/pps-tools/timepps.h timepps.h\n\n\n\nBuild the ppstest tool\n\n\n    $ cd /usr/src/pps-tools\n    $ make\n\n\n\nObtain and build ldattach\n\n\n    $ cd /usr/src\n    $ mkdir ldattach \n    $ cd ldattach\n    $ wget http://www.kernel.org/pub/linux/utils/util-linux-ng/v2.14/util-linux-ng-2.14.2.tar.bz2\n    $ tar jxf util-linux-ng-2.14.2.tar.bz2\n    $ cd util-linux-ng-2.14.2\n    $ ./configure\n    $ make\n\n\n\nNote :\n If the link http://www.kernel.org/pub/linux/utils/util-linux-ng/v2.14/util-linux-ng-2.14.2.tar.bz2 doesn't work,then try using the link http://www.artfiles.org/kernel.org/pub/linux/utils/util-linux-ng/v2.14/util-linux-ng-2.14.2.tar.bz2. If util-linux is unavailable from both locations, please download the same from here util-linux-ng-2.14.2.tar.bz2.\n\n\nCopy ldattach\n\n\n    $ cd sys-utils\n    $ cp ldattach /usr/sbin/\n\n\n\nCreate pps port\n\n\n    $ ldattach pps /dev/pps1\n\n\n\nNote:\n Ignore any errors here\n\n\nTest PPS (pps0 or pps1 )\n\n\n    $ cd /usr/src/pps-tools/\n    $ ./ppstest /dev/pps1\n\n\n\nThe output should be something like this :\n\n\n    trying PPS source \"/dev/pps1\"\n    found PPS source \"/dev/pps1\"\n    ok, found 1 source(s),now start fetching data...\n    source 0 -assert 1351501153.999956346, sequence: 4781 - clear 0.00000000, sequence: 0\n    source 0 -assert 1351501154.999954601, sequence: 4782 - clear 0.00000000, sequence: 0\n    source 0 -assert 1351501155.999951856, sequence: 4782 - clear 0.00000000, sequence: 0\n\n\n\nNote : PPS support can be checked even without the specific hardware by using ktimer which is there in the kernel. It can be checked on /dev/pps0.Therefore,always check the pps data on /dev/pps1 which is coming from the Navika100 module because on /dev/pps0 the pps data would be there even if the Navika100 has not got the GPS fix.\n\n\nNow having NTP daemon perform the following steps\n\n\n    $ mkdir /usr/src/ntp     (Make a convenient working directory , if you don't already have one)\n    $ cd ntp\n    $ apt-get install libcap-dev\n    $ wget http://www.eecis.udel.edu/~ntp/ntp_spool/ntp4/ntp-4.2/ntp-4.2.6p5.tar.gz\n    $ tar xvfz ntp-4.2.6p5.tar.gz\n    $ cd ntp-4.2.6p5\n    $ ./configure \n    $ make \n    $ make install\n\n\n\nNMEA reference clock driver directly accesses the serial port. Expects that the port will be numbered /dev/gpsX and /dev/gpsppsX, where X is 0,1,2... Corresponding to each X, it creates a pseudo-ip 127.127.20.X\n\n\nSo,make the soft links for ntpd to read gps nmea and 1 pps as input\n\n\n    $ ln -s /dev/ttyO4 /dev/gps1\n    $ ln -s /dev/pps1 /dev/gpspps1\n\n\n\nConfigure the ntp.conf file so that ntpd(ntp daemon) can read 1pps and gps data\n\n\n    $ nano /etc/ntp.conf\n\n\n\nEdit the file as :\n\n\n\n\n\n\nUncomment statsdir /var/log/ntpstats\n\n\n\n\n\n\nAdd the ntp server as per your location from NTP Pool Servers\n\n\n\n\n\n\nNote:\n This step is already done in section 2, servers should already be present\n\n\n\n\nAdd support for GPS and PPS ( add them just after the list of servers)\n# NMEA refclock driver directly from serial port\nserver 127.127.20.1 mode 47 minpoll 4 iburst prefer true\nfudge 127.127.20.1 flag1 1 flag2 0 flag3 0 flag4 0 time1 0.00 refid GPS\n# ATOM PPS driver directly from interrupt through /dev/pps1\nserver 127.127.22.1 mode 47 minpoll 4 maxpoll 4 iburst true\nfudge 127.127.22.1 flag2 0 flag3 0 flag4 1 time1 0.0 refid PPS\n\n\n\n\n\n\n\nSave and Exit\n\n\nNote :\n The direct serial port driver 20.0 or 20.1 from NMEA are different from 127.127.28.1 the one mentioned above.\n\n\nNow, edit the following file:\n\n\n    $ nano /etc/init.d/ntp\n\n\n\nEdit PATH in the file to add /usr/local/bin to look like :\n\n\n    PATH=/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n\n\n\nAnd change the path of DAEMON to following :\n\n\n    DAEMON=/usr/local/bin/ntpd\n\n\n\nSave and Exit\n\n\nCommands for NTP server\n\n\n    $ service ntp start           \n    $ service ntp stop            \n    $ service ntp restart\n\n\n\nTo check whether ntpd is working with GPS NMEA and PPP or not :\n\n\n    $ ntpq -p\n\n\n\nThe output should be something like :\n\n\n      remote           refid      st t when poll reach   delay   offset  jitter\n\n    -120-88-47-10.in 103.1.106.69     2 u   43   64  377   51.624  537.091   1.517\n    +27.114.150.13   130.133.1.10     2 u   36   64  377  222.386  481.023   0.583\n    +77.235.14.49    131.188.3.220    2 u   41   64  377  284.982  510.672   1.408\n    *GPS_NMEA(1)     .GPS.            0 l   10   16  377    0.000    1.996   0.204\n    oPPS(1)          .PPS.            0 l    9   16  377    0.000  -469.94   0.191\n\n\n\nNote:\n\n\n1.If GPS_NMEA(1) and PPS(1) are not visible in the list of servers as shown above, just restart the NTP Server.\n2.The '*' in front of GPS shows that the peer has been declared the system peer and lends its variables to the system variables.\n3.The 'o' shows that the peer has been declared the system peer and lends its variables to the system variables. However,the actual system synchronization is derived from a pulse-per-second(PPS) signal,either indirectly via the PPS reference clock or directly via kernel interface.\n\n\nAs soon as the ntp gets synchronized with the pps the jitter in the time starts decreasing and becomes stable after some time. \n\n\nShowing the Jitter and Offset of 1PPS when NTP gets synchronized with it\n\n\n\n\nNote on NTPd and its settings\n\n\nNTPd is certainly not the only way to use the GPS and PPS inputs although it is indeed pretty good. Considering the number of knobs it has, one must understand its workings to get good results. The settings used in /etc/ntp.conf are crucial in deciding this and can take quite a lot of effort to set up properly. If you're using ntpd, it is better to use the ntp clock discipline instead of the kernel discipline. Also, choosing the right time server is important as the offset and jitter of the external time server clock take a long time to be mitigated locally. These points become clear if you carefully study the following figures for some long term data as ntpd slowly settles.", 
            "title": "Home"
        }, 
        {
            "location": "/#configuring-for-gps-location-and-time-synchronization", 
            "text": "", 
            "title": "Configuring for GPS Location and Time Synchronization"
        }, 
        {
            "location": "/#network-time-protocol-ntp", 
            "text": "NTP is a time synchronizing protcol.It synchronizes the time of the machines on a network by using the set of time servers as its reference.", 
            "title": "Network Time Protocol (NTP)"
        }, 
        {
            "location": "/#need-for-time-synchronization", 
            "text": "Most of us believe that the computer clocks are accurate,being unaware of the fact that the crystal oscillator that is being used in the computer clocks drift each day because it is sensitive to temperature and other things.It is because of this reason there is a necessity for those organizations to synchronize their computers clocks who requires time accuracy nearest to seconds.", 
            "title": "Need for time synchronization"
        }, 
        {
            "location": "/#importance-of-time-synchronization", 
            "text": "In today's era time synchronization plays a critical role in managing or debugging things over the network as each event requires time stamp.Following are the areas where time synchronization is critical:  1.Transaction Management\n2.Billing Services\n3.Detecting the fault over network", 
            "title": "Importance of Time Synchronization"
        }, 
        {
            "location": "/#basic-features-of-ntp", 
            "text": "NTP also requires some time reference clock with whose time it can synchronize the clocks of other computers on the netwrok.It uses UTC as reference time.  NTP selects the best among all defined time servers to get synchronize to.It selects the one from which it is receiving the reply in lesser time(i.e. for whom the roundtrip time is least )  If the network is temporarily not available then NTP uses previous measurements to get the current time.", 
            "title": "Basic Features of NTP"
        }, 
        {
            "location": "/#installing-and-configuring-ntp-for-gps-nmea-and-pps", 
            "text": "To get accurate time, we use the GPS Module Navika100 GPS NMEA messages and 1 PPS signal as inputs and feed it to a NTP server running on the Beaglebone black.  This page describes how it is done. The overall architecture is like this: NTP runs as a daemon (ntpd). It receives inputs from servers (pool.ntp.org, etc.), and NMEA drivers.", 
            "title": "Installing and Configuring NTP for GPS NMEA and PPS"
        }, 
        {
            "location": "/#installing-ntp-and-setting-up-a-ntp-server", 
            "text": "Note: All commands are executed as root on Beaglebone Black unless mentioned otherwise.", 
            "title": "Installing NTP and setting up a NTP server"
        }, 
        {
            "location": "/#basic-initial-configuration", 
            "text": "BBB should be connected to internet  BBB should be running debian wheezy  kernel should have the pps support    Before configuring GPS with NTP first install the ntp package :  login as root using      $ sudo su  install ntp      $ apt-get install ntp  Change the configuration file of ntp on Beaglebone Black to include the servers according to your time zone to obtain the time.      $ nano /etc/ntp.conf  Add the ntp server as per your location from NTP Pool Servers.  If your time zone is Asia and in Asia you are in India then add the following in ntp.conf just after the section where 4 servers from debian are already mentioned and by default commented. Uncomment the first server from that list, to look like this :      server 0.debian.pool.ntp.org\n    #server 1.debian.pool.ntp.org iburst\n    #server 2.debian.pool.ntp.org iburst\n    #server 3.debian.pool.ntp.org iburst\n\n    server 0.in.pool.ntp.org\n    server 3.asia.pool.ntp.org\n    server 0.asia.pool.ntp.org  Now Save and exit.  Restart ntp using      $ /etc/init.d/ntp restart  To check the ntp output:      $ ntpq -p", 
            "title": "Basic initial configuration:"
        }, 
        {
            "location": "/#configuring-gps-nmea-uart-port-and-pps-gpio-to-work-with-navika-10-gps-module", 
            "text": "Go to the following directory for enabling UART port and configuring PPS GPIO      cd /lib/firmware  Now ensure that the BBB Vayu overlay is already present in the directory (BBB_VAYU-00A0.dtbo)      ls  If it is not present, please download and copy the overlay from here  Apply the following device tree overlays :      $ echo BB-UART4   /sys/devices/bone_capemgr.9/slots\n    $ echo BBB_VAYU   /sys/devices/bone_capemgr.9/slots  To check that the overlays have been properly applied , do following :  i. Check slots for device trees implemented      $ cat /sys/devices/bone_capemgr.9/slots  The output should be like this :      0: 54:PF--- \n    1: 55:PF--- \n    2: 56:PF--- \n    3: 57:PF--- \n    4: ff:P-O-L Bone-LT-eMMC-2G,00A0,Texas Instrument,BB-BONE-EMMC-2G \n    5: ff:P-O-L Bone-Black-HDMI,00A0,Texas Instrument,BB-BONELT-HDMI \n    7: ff:P-O-L Override Board Name,00A0,Override Manuf, BB-UART4\n    8: ff:P-O-L Override Board Name,00A0,Override Manuf, BBB_VAYU  L indicates that the device tree overlay is applied.  ii To check that PPS GPIO has been configured, check the system log messages and list of devices :      $ dmesg  It should show pps pps1: Registered IRQ 171 as PPS source in the messages.  Now, to read the GPS NMEA packets and see their raw format,do the following :  Note1: Ensure that GPS Antenna has been connected to correct antenna SMA connector.  Note2: GPS Fix Led takes some time before it starts blinking in sync with 1 pps signal.  Note3: For better and faster results, keep GPS antenna under open sky or outdoors. Indoors, GPS antenna may take time to get the sync as well as give accurate NMEA messages.  Set the following port settings for UART4 to read the GPS NMEA messages      $ stty -F /dev/ttyO4 19200 raw  Read the data on the port and output should be something like :      $ cat /dev/ttyO4\n\n    $GPGSA,A,3,02,04,12,25,24,05,10,,,,,,02.4,01.1,02.1*07 \n    $GPGLL,2834.2631,N,07720.5426,E,102954.00,A,A*6E \n    $GPGSV,3,1,07,02,71,345,50,04,40,038,48,12,62,315,47,25,20,321,45*7F \n    $GPGSV,3,2,07,05,41,167,23,10,48,086,23,24,24,236,30,,,,*48 \n    $GPGSV,3,3,07,,,,,,,,,,,,,,,,*7E", 
            "title": "Configuring GPS NMEA UART port and PPS GPIO to work with Navika 10 GPS Module"
        }, 
        {
            "location": "/#using-xgps-and-gpsd-to-work-with-navika", 
            "text": "Using Gpsd  Gpsd allows a direct connection to a GPS receiver, in this case the Navika module, and collecting NMEA messages directly from the serial port. This enables NMEA messages to be then picked up by multiple clients such as xgps, cgps and also ntpd.   Check first that Navika is configured correctly and gps data is reaching the /dev/ttyO4 port. cat /dev/ttyO4    You should see NMEA messages appearing on stdout.   Starting GPSD can be done interactively by  gpsd /dev/ttyO4 -D 8 -N -b     Or you may set it up as a service as well to start automatically. Once gpsd starts, clients may connect to gpsd simultaneously.  For enabling NMEA messages in NTP, add the following to /etc/ntp.conf:      server 127.127.28.0 minpoll 4 maxpoll 4\n    fudge 127.127.28.0 time1 0.420 refid GPS\n\n    server 127.127.28.1 minpoll 4 maxpoll 4 prefer\n    fudge 127.127.28.1 refid GPS1  and then restart ntpd.  To run and see xgps, type      xgps  A screenshot is shown below:    To run and use cgps, type      cgps  A screenshot is shown below:", 
            "title": "Using Xgps and Gpsd to work with Navika"
        }, 
        {
            "location": "/#statistics-collection", 
            "text": "If statistics collection is enabled in /etc/ntp.conf file, you can see the resultant output logged in peerstats file. This gives both offset and jitter values for each reference clock (including time servers from the ntp.org pool). By looking specifically at the NMEA reference clock, we can get the gps jitter and gps offset values. Separately, it is also possible to compare the effect of pps on the basic gps signal (see Getting PPS and GPS to work with NTP server for details).             Getting PPS and GPS to work with NTP server  This procedure requires Kernel with PPS drivers enabled and also PPS configured for GPIO. To ensure that PPS drivers are there in the kernel by following the steps:  login as root (ignore if you are already at root)\ncheck in the /dev directory whether pps drivers are there or not      $ ls /dev/pps*  you should see pps0 in the list  Note:  If pps0 is not present, please follow Add USB and PPS drivers to update the kernel to include PPS drivers.  Install the following packages      $ apt-get install ncurses-dev\n    $ apt-get install bzip2\n    $ apt-get install module-init-tools\n    $ apt-get install initramfs-tools\n    $ apt-get install procps \n    $ apt-get install fakeroot\n    $ apt-get install zlib1g-dev \n    $ apt-get install git-core \n    $ apt-get install libblkid-dev\n    $ apt-get install kernel-package  Note:  In latest kernel versions, it is possible few packages mentioned above are already installed.  Obtain the linuxpps userland tools      $ cd /usr/src\n    $ git clone git://www.linuxpps.org/git/pps-tools pps-tools  Copy the timepps.h file so ntpd gets built with pps support      $ cd /usr/include\n    $ cp /usr/src/pps-tools/timepps.h timepps.h  Build the ppstest tool      $ cd /usr/src/pps-tools\n    $ make  Obtain and build ldattach      $ cd /usr/src\n    $ mkdir ldattach \n    $ cd ldattach\n    $ wget http://www.kernel.org/pub/linux/utils/util-linux-ng/v2.14/util-linux-ng-2.14.2.tar.bz2\n    $ tar jxf util-linux-ng-2.14.2.tar.bz2\n    $ cd util-linux-ng-2.14.2\n    $ ./configure\n    $ make  Note :  If the link http://www.kernel.org/pub/linux/utils/util-linux-ng/v2.14/util-linux-ng-2.14.2.tar.bz2 doesn't work,then try using the link http://www.artfiles.org/kernel.org/pub/linux/utils/util-linux-ng/v2.14/util-linux-ng-2.14.2.tar.bz2. If util-linux is unavailable from both locations, please download the same from here util-linux-ng-2.14.2.tar.bz2.  Copy ldattach      $ cd sys-utils\n    $ cp ldattach /usr/sbin/  Create pps port      $ ldattach pps /dev/pps1  Note:  Ignore any errors here  Test PPS (pps0 or pps1 )      $ cd /usr/src/pps-tools/\n    $ ./ppstest /dev/pps1  The output should be something like this :      trying PPS source \"/dev/pps1\"\n    found PPS source \"/dev/pps1\"\n    ok, found 1 source(s),now start fetching data...\n    source 0 -assert 1351501153.999956346, sequence: 4781 - clear 0.00000000, sequence: 0\n    source 0 -assert 1351501154.999954601, sequence: 4782 - clear 0.00000000, sequence: 0\n    source 0 -assert 1351501155.999951856, sequence: 4782 - clear 0.00000000, sequence: 0  Note : PPS support can be checked even without the specific hardware by using ktimer which is there in the kernel. It can be checked on /dev/pps0.Therefore,always check the pps data on /dev/pps1 which is coming from the Navika100 module because on /dev/pps0 the pps data would be there even if the Navika100 has not got the GPS fix.  Now having NTP daemon perform the following steps      $ mkdir /usr/src/ntp     (Make a convenient working directory , if you don't already have one)\n    $ cd ntp\n    $ apt-get install libcap-dev\n    $ wget http://www.eecis.udel.edu/~ntp/ntp_spool/ntp4/ntp-4.2/ntp-4.2.6p5.tar.gz\n    $ tar xvfz ntp-4.2.6p5.tar.gz\n    $ cd ntp-4.2.6p5\n    $ ./configure \n    $ make \n    $ make install  NMEA reference clock driver directly accesses the serial port. Expects that the port will be numbered /dev/gpsX and /dev/gpsppsX, where X is 0,1,2... Corresponding to each X, it creates a pseudo-ip 127.127.20.X  So,make the soft links for ntpd to read gps nmea and 1 pps as input      $ ln -s /dev/ttyO4 /dev/gps1\n    $ ln -s /dev/pps1 /dev/gpspps1  Configure the ntp.conf file so that ntpd(ntp daemon) can read 1pps and gps data      $ nano /etc/ntp.conf  Edit the file as :    Uncomment statsdir /var/log/ntpstats    Add the ntp server as per your location from NTP Pool Servers    Note:  This step is already done in section 2, servers should already be present   Add support for GPS and PPS ( add them just after the list of servers) # NMEA refclock driver directly from serial port\nserver 127.127.20.1 mode 47 minpoll 4 iburst prefer true\nfudge 127.127.20.1 flag1 1 flag2 0 flag3 0 flag4 0 time1 0.00 refid GPS\n# ATOM PPS driver directly from interrupt through /dev/pps1\nserver 127.127.22.1 mode 47 minpoll 4 maxpoll 4 iburst true\nfudge 127.127.22.1 flag2 0 flag3 0 flag4 1 time1 0.0 refid PPS    Save and Exit  Note :  The direct serial port driver 20.0 or 20.1 from NMEA are different from 127.127.28.1 the one mentioned above.  Now, edit the following file:      $ nano /etc/init.d/ntp  Edit PATH in the file to add /usr/local/bin to look like :      PATH=/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin  And change the path of DAEMON to following :      DAEMON=/usr/local/bin/ntpd  Save and Exit  Commands for NTP server      $ service ntp start           \n    $ service ntp stop            \n    $ service ntp restart  To check whether ntpd is working with GPS NMEA and PPP or not :      $ ntpq -p  The output should be something like :        remote           refid      st t when poll reach   delay   offset  jitter\n\n    -120-88-47-10.in 103.1.106.69     2 u   43   64  377   51.624  537.091   1.517\n    +27.114.150.13   130.133.1.10     2 u   36   64  377  222.386  481.023   0.583\n    +77.235.14.49    131.188.3.220    2 u   41   64  377  284.982  510.672   1.408\n    *GPS_NMEA(1)     .GPS.            0 l   10   16  377    0.000    1.996   0.204\n    oPPS(1)          .PPS.            0 l    9   16  377    0.000  -469.94   0.191  Note:  1.If GPS_NMEA(1) and PPS(1) are not visible in the list of servers as shown above, just restart the NTP Server.\n2.The '*' in front of GPS shows that the peer has been declared the system peer and lends its variables to the system variables.\n3.The 'o' shows that the peer has been declared the system peer and lends its variables to the system variables. However,the actual system synchronization is derived from a pulse-per-second(PPS) signal,either indirectly via the PPS reference clock or directly via kernel interface.  As soon as the ntp gets synchronized with the pps the jitter in the time starts decreasing and becomes stable after some time.   Showing the Jitter and Offset of 1PPS when NTP gets synchronized with it", 
            "title": "Statistics collection"
        }, 
        {
            "location": "/#note-on-ntpd-and-its-settings", 
            "text": "NTPd is certainly not the only way to use the GPS and PPS inputs although it is indeed pretty good. Considering the number of knobs it has, one must understand its workings to get good results. The settings used in /etc/ntp.conf are crucial in deciding this and can take quite a lot of effort to set up properly. If you're using ntpd, it is better to use the ntp clock discipline instead of the kernel discipline. Also, choosing the right time server is important as the offset and jitter of the external time server clock take a long time to be mitigated locally. These points become clear if you carefully study the following figures for some long term data as ntpd slowly settles.", 
            "title": "Note on NTPd and its settings"
        }
    ]
}